<!-- 
Notice how this route has a route parameter 'id'. This is how we can pass data to the route.
See how the links are made in 'PostList.razor'.
-->
@page "/post/{Id}"

@using kreddit_app.Data;
@using shared.Model;
@inject ApiService apiService

<PageTitle>Kreddit</PageTitle>

<style>
div.contents {
  background-color: #f2f0eb;
  width: 600px;
  border: 2px solid #452d3d;
  padding: 10px;
  margin-top: 20px;
}
</style>

<td><button @onclick="NavigateToHome">Home</button></td>


@if (Post == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="contents">
        <h4>@Post.Title</h4>
        <p><strong>User: @Post.User, Votes: @(Post.Upvote - Post.Downvote)</strong></p>
        <p>@Post.Content</p>
    </div>

    <div class="contents">
    <h4>Comments</h4>
    <table>
        <tr>
            <th>User</th>
            <th>Comment</th>
            <th colspan="4">Votes</th>
        </tr>
        @foreach (var comment in Post.Comments)
        {
            <tr>
                <td>@comment.User</td>
                <td>@comment.Content</td>
                <td>@(comment.Upvote)</td>
                    <td><button @onclick="() => UpvoteComment(PostId, (int)comment.CommentId)">Upvote</button></td>
                <td>@(comment.Downvote)</td>
                    <td><button @onclick="() => DownvoteComment(PostId,(int)comment.CommentId)">Downvote</button></td>
            </tr>
        }
    </table>
    </div>

    <!-- This demonstrates how to pass in PostId to the component 'CreateComment'. See how 
         it is used in the file CreateComment.razor -->
    <CreateComment PostId=@PostId></CreateComment>
}

@code {
    [Parameter]
    public string Id { get; set; }
    public int PostId { get { return int.Parse(Id); } }
    public Post Post { get; set; }
    public Comment Comment { get; set; }
    @inject NavigationManager NavigationManager;

    protected override async Task OnInitializedAsync()
    {
        Post = await apiService.GetPost(PostId);

    }
    private async void UpvoteComment(int postId, int commentId)
    {
        var updatedcomment = await apiService.UpvoteComment(postId, commentId);

        
        var comment = Post.Comments.FirstOrDefault(c => c.CommentId == commentId);


        StateHasChanged();
        NavigationManager.NavigateTo($"/post/{postId}", true);
        
    }

    private async void DownvoteComment(int postId, int commentId)
    {
        var updatedcomment = await apiService.DownvoteComment(postId, commentId);


        var comment = Post.Comments.FirstOrDefault(c => c.CommentId == commentId);


        StateHasChanged();
        NavigationManager.NavigateTo($"/post/{postId}", true);
    }
    private void NavigateToHome()
    {
        NavigationManager.NavigateTo("/");
    }
}